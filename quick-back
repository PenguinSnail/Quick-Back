#!/bin/bash

# quick backup script
# by PenguinSnail and Bithakr
# ------------------------------

#Define variables
DEST_PATH=/mnt/quick-back
DEST=$DEST_PATH
SRC=/
FORCE=0
FSTAB=0
FORMAT=0
BOOLEXCLUDE=0
EXCLUDEDIR=null

#Define functions

function usage
{
echo "Usage: quick-back [OPTION]..."
echo "Create an incremental backup to an external drive or directory (using rsync)"
echo "Default Backup Directory: /mnt/quick-back"
echo "Default Source Directory: /"
echo ""
echo "	-h, --help | Dispay this help dialog"
echo "	-d, --destination | Use an alternate backup destination (accepts /dev/XXX or a path)"
echo "	-e, --exclude | Exempt another folder from backup (/dev, /run, /sys, /proc, and more importantly /tmp already excluded)"
echo "	-s, --source | Use an alternate source destination"
echo "	--force-ignore | Force backup if destination isn't a mountpoint and ignore destination filesystem type"
}

function check_genfstab
{
if [ -f /usr/bin/genfstab ]; then
	FSTAB=1
else
	FSTAB=0
fi
}

function repair_fstab
{
check_genfstab

if [ "$FSTAB" = "1" ]; then
	if [ -f $DEST_PATH/etc/fstab ]; then
		if grep -qs $DEST_PATH /proc/mounts; then
			echo "Repair the backed up fstab file?"
			echo "This will re-create the fstab file in the backup to make it bootable"
			echo "If your boot loader requires boot entries (like grub) you will still need to create one"
			echo -n "Continue? [y/N] >"
			read CONFIRM_FSTAB	
			if [ "$CONFIRM_FSTAB" != "y" ]; then
				exit
        		fi
			sudo mv $DEST_PATH/etc/fstab $DEST_PATH/etc/fstab.original
			echo "$DEST_PATH/etc/fstab -> $DEST_PATH/etc/fstab.original"
			genfstab -U $DEST_PATH > $DEST_PATH/etc/fstab
			sudo sed -e s/nosuid,//g -i $DEST_PATH/etc/fstab
			sudo sed -e s/nodev,//g -i $DEST_PATH/etc/fstab
		fi
	fi
	
fi

exit
}

function check_dest
{
#check if $DEST is a mountpoint
if ! grep -qs $DEST_PATH /proc/mounts; then
	echo "Nothing is mounted on $DEST_PATH!"
	exit 1
fi
}

function backup
{
#backup $SRC to $DEST_PATH
echo "Starting backup..."
if [ "$BOOLEXCLUDE" = "0" ]; then
	sudo rsync -avpx --delete --exclude=/boot/ --exclude=/run/ --exclude=/proc/ --exclude=/tmp/ --exclude=/sys/ --exclude=/dev/ --exclude=$DEST_PATH $SRC/* $DEST_PATH
elif [ "$BOOLEXCLUDE" = "1" ]; then
	sudo rsync -avpx --delete --exclude=/boot/ --exclude=/run/ --exclude=/proc/ --exclude=/tmp/ --exclude=/sys/ --exclude=/dev/ --exclude=$DEST_PATH $SRC/* $DEST_PATH --exclude=$EXCLUDEDIR
fi
echo "Backup Complete!"
repair_fstab
}

function check_force
{
if [ "$FORCE" = "1" ]; then
	echo "You are forcing this program to ignore where it is backing up to."
	echo "If you are backing up to a non-mountpoint destination, you WILL fill up your storage."
	echo "If you are backing up to a mount with a different filesystem, it may not function properly."
	echo -n "Do you wish to continue? [y/N] >"
	read CONFIRM	
	if [ "$CONFIRM" != "y" ]; then
            echo "Exiting program."
            exit 1
        fi
	backup
fi
}

function filesystems_check
{
if grep -qs $DEST_PATH /proc/mounts; then
	root_TYPE=$(findmnt -n -o FSTYPE /)
	dest_TYPE=$(findmnt -n -o FSTYPE $DEST_PATH)
	dest_DEV=$(findmnt -n -o SOURCE $DEST_PATH)
	echo "Source Filesystem: $root_TYPE"
	echo "Destination Filesystem: $dest_TYPE"
	if [ "$root_TYPE" != "$dest_TYPE" ]; then
		echo "Your destination filesystem is not the same as your source filesystem."
		echo "This may cause issues with permissions among other things."
		echo "Reformat the destination to match the source?"
		echo "WARNING! This will erase ALL data on the source destination! Procede with caution!"
		echo -n "[y/N] >"
		read CONFIRM_FS
		if [ "$CONFIRM_FS" != "y" ]; then
			echo "Continue to backup without proper drive format?"
			echo -n "[y/N] >"
			read FS_CONTINUE
			if [ "$FS_CONTINUE" != "y" ]; then
				exit 1
			fi
			return
		fi
		FORMAT=1
	fi
fi
}

function format
{
if grep -qs $DEST_PATH /proc/mounts; then
	if [ "$FORMAT" = "1" ]; then
		echo "Formating destination device..."
		if sudo umount "$DEST_PATH"; then
			sudo mkfs."$root_TYPE" "$dest_DEV"
			mount_dev
		else
			exit 1
		fi
	fi
fi
}

function mount_dev
{
if [[ $DEST = /dev/* ]]; then
	echo "Destination device is $DEST"
	echo "Mounting $DEST on $DEST_PATH"
	sudo mount $DEST $DEST_PATH
fi
}

function get_destination
{
if [[ $DEST == /dev/* ]]; then
	DEST_PATH=/mnt/backup
else
	DEST_PATH=$DEST
fi
if [ -d $DEST_PATH ]; then
	return
else
	echo "making the directory"	
	mkdir $DEST_PATH
fi
}

#parse command options
while [ "$1" != "" ]; do
    case $1 in
        -d | --destination )    shift
                                DEST=$1
                                ;;
        -s | --source )         shift
                                SRC=$1
                                ;;
	--force-ignore )            FORCE=1
                                ;;
	-e | --exclude )	        BOOLEXCLUDE=1
				                shift
				                EXCLUDEDIR=$1
								;;
        -h | --help )           usage
                                exit
                                ;;
        * )                     usage
                                exit 1
    esac
    shift
done

#require sudo
if [[ $EUID != 0 ]]; then
    echo "Please run with sudo:"
    echo "sudo $0 $*"
    exit 1
fi


#Call functions
check_force
get_destination
mount_dev
filesystems_check
format
check_dest
backup
